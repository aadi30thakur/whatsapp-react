{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","SearchOutlined","placeholder","type","room","key","Chat","roomId","useParams","input","setinput","setRoomName","Date","length","timestamp","toDate","toUTCString","displayName","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23f9c93d.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyALMFSn5ZlQwNs0l5zx-vGo-YTiQWoLRA8\",\r\n  authDomain: \"whatsapp-react-28b4b.firebaseapp.com\",\r\n  databaseURL: \"https://whatsapp-react-28b4b.firebaseio.com\",\r\n  projectId: \"whatsapp-react-28b4b\",\r\n  storageBucket: \"whatsapp-react-28b4b.appspot.com\",\r\n  messagingSenderId: \"525199461092\",\r\n  appId: \"1:525199461092:web:41d34bfd0605d423c47af1\",\r\n  measurementId: \"G-LLD64X3TPT\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nexport { auth, provider };\r\nexport default db;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./SidebarChat.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport db from \"./firebase\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction SidebarChat({ id, name, addNewChat }) {\r\n  const [seed, setSeed] = useState(\"\");\r\n\r\n  const [messages, setMessages] = useState(\"\");\r\n  useEffect(() => {\r\n    if (id) {\r\n      db.collection(\"Rooms\")\r\n        .doc(id)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [id]);\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 500000));\r\n  }, []);\r\n\r\n  const createChat = () => {\r\n    const roomName = prompt(\"Please enter name for Chat\");\r\n    if (roomName) {\r\n      db.collection(\"Rooms\").add({\r\n        name: roomName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return !addNewChat ? (\r\n    <Link to={`/Rooms/${id}`}>\r\n      <div className=\"sidebarchat\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n        <div className=\"sidebarchat_info\">\r\n          <h2>{name}</h2>\r\n          <p>{messages[0]?.message}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n    <div onClick={createChat} className=\"sidebarchat\">\r\n      <h2>Add new chat</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChat;\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { SearchOutlined } from \"@material-ui/icons\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport db from \"./firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction Sidebar() {\r\n  const [rooms, setRooms] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n  useEffect(() => {\r\n    const unsubscribe = db.collection(\"Rooms\").onSnapshot((snapshot) =>\r\n      setRooms(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar_header\">\r\n        <Avatar src={user?.photoURL} />\r\n        <div className=\"sidebar_headerRight\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar_search\">\r\n        <div className=\"sidebar_searchContainer\">\r\n          <SearchOutlined />\r\n          <input placeholder=\"search or start new chat\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar_chats\">\r\n        <SidebarChat addNewChat />\r\n        {rooms.map((room) => (\r\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Sidebar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport AttachFile from \"@material-ui/icons/AttachFile\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { SearchOutlined } from \"@material-ui/icons\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport \"./chat.css\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from \"./firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport firebase from \"firebase\";\r\nfunction Chat() {\r\n  const { roomId } = useParams();\r\n\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [input, setinput] = useState(\"\");\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 500000));\r\n  }, [roomId]);\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"you typed >>>>>>>>>>>>>\", input);\r\n    db.collection(\"Rooms\").doc(roomId).collection(\"messages\").add({\r\n      message: input,\r\n      name: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setinput(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (roomId) {\r\n      db.collection(\"Rooms\")\r\n        .doc(roomId)\r\n        .onSnapshot((snapshot) => {\r\n          setRoomName(snapshot.data().name);\r\n        });\r\n      db.collection(\"Rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [roomId]);\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat_header\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n\r\n        <div className=\"chat_headerInfo\">\r\n          <h3>{roomName}</h3>\r\n          <p>\r\n            last seen{\" \"}\r\n            {new Date(\r\n              messages[messages.length - 1]?.timestamp?.toDate()\r\n            ).toUTCString()}\r\n          </p>\r\n        </div>\r\n        <div className=\"chat_headerRight\">\r\n          <IconButton>\r\n            <SearchOutlined />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFile />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat_body\">\r\n        {messages.map((message) => (\r\n          <p\r\n            className={`chat_message ${\r\n              message.name === user.displayName && \"chat_reciver\"\r\n            } `}\r\n          >\r\n            <span className=\"chat_name\">{message.name}</span>\r\n            {message.message}\r\n            <span className=\"chat_timestamp\">\r\n              {new Date(message.timestamp?.toDate()).toUTCString()}\r\n            </span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat_footer\">\r\n        <InsertEmoticonIcon />\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setinput(e.target.value)}\r\n            placeholder=\"type a message\"\r\n          />\r\n          <button type=\"submit\" onClick={sendMessage}>\r\n            send a message\r\n          </button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","export const initialState = {\r\n  user: null,\r\n};\r\nexport const actionTypes = {\r\n  SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport \"./login.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { auth, provider } from \"./firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { actionTypes } from \"./reducer\";\r\n\r\nfunction Login() {\r\n  const [{}, dispatch] = useStateValue();\r\n\r\n  const signin = () => {\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then((result) => {\r\n        dispatch({\r\n          type: actionTypes.SET_USER,\r\n          user: result.user,\r\n        });\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login_container\">\r\n        <img\r\n          src=\"https://images.unsplash.com/photo-1494253109108-2e30c049369b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80\"\r\n          alt=\"\"\r\n        />\r\n        <div className=\"login_text\">\r\n          <h1>Signin to whatsapp</h1>\r\n        </div>\r\n        <Button onClick={signin}>Signin with google</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n  return (\n    //\n    <div className=\"App\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app-body\">\n          <Router>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/Rooms/:roomId\">\n                <Chat />\n              </Route>\n              <Route path=\"/\">\n                <Chat />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from \"./reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}